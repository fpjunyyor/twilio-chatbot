from flask import Flask, request
from twilio.twiml.messaging_response import MessagingResponse
from openai import OpenAI
from dotenv import load_dotenv
import os
import re

# Carrega as vari√°veis do arquivo .env
load_dotenv()

# Inicializa clientes
client_openai = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
app = Flask(__name__)

# Estado simples por usu√°rio
usuarios = {}

# ====== Configura√ß√µes da Escola ======
ESCOLA_NOME = "Escola de Futebol Nunes 9"
WHATS_ATENDENTE = "(21) 98943-9693"
MENSALIDADE = 160.00
HORARIOS = [
    "08h30 √†s 10h30",
    "15h00 √†s 17h00",
    "17h00 √†s 19h00",
]
# =====================================

def menu_texto():
    return (
        f"üèÜ {ESCOLA_NOME} ‚Äì Matr√≠culas Abertas! ‚öΩ\n\n"
        "Ol√°! üëã Selecione uma op√ß√£o para continuar:\n"
        "1Ô∏è‚É£ Informa√ß√µes sobre as aulas\n"
        "2Ô∏è‚É£ Documentos necess√°rios para matr√≠cula\n"
        "3Ô∏è‚É£ Valores e formas de pagamento\n"
        "4Ô∏è‚É£ Hor√°rios de treino\n"
        "5Ô∏è‚É£ Falar com um atendente\n\n"
        "Digite o n√∫mero da op√ß√£o ou escreva *menu* para ver as op√ß√µes novamente."
    )

def responder_opcao(opcao: str) -> str:
    opcao = opcao.strip()

    if opcao == "1":
        return (
            "‚öΩ *Informa√ß√µes sobre as aulas*\n\n"
            "Os treinos acontecem de *segunda a quinta-feira*.\n"
            "Cada aluno treina *3 vezes por semana*.\n"
            "Faixa et√°ria: *crian√ßas de 5 a 12 anos*."
        )

    elif opcao == "2":
        return (
            "üìÑ *Documentos necess√°rios para matr√≠cula*\n\n"
            "- 1 foto 3x4\n"
            "- C√≥pia do RG ou Certid√£o de Nascimento\n"
            "- C√≥pia do CPF\n"
            "- Comprovante de resid√™ncia\n"
            "- RG e CPF do respons√°vel\n"
            "- Declara√ß√£o escolar\n"
            "- Atestado m√©dico\n"
            "_Todas as c√≥pias devem ser leg√≠veis._"
        )

    elif opcao == "3":
        return (
            "üí∞ *Valores e formas de pagamento*\n\n"
            f"A mensalidade √© de *R$ {MENSALIDADE:.2f}*.\n"
            "Aceitamos dinheiro, Pix ou transfer√™ncia."
        )

    elif opcao == "4":
        return (
            "‚è∞ *Hor√°rios de treino* (segunda a quinta-feira)\n\n"
            f"‚Ä¢ {HORARIOS[0]}\n"
            f"‚Ä¢ {HORARIOS[1]}\n"
            f"‚Ä¢ {HORARIOS[2]}"
        )

    elif opcao == "5":
        return (
            "üì≤ *Falar com um atendente*\n\n"
            f"Chame no WhatsApp: {WHATS_ATENDENTE}\n"
            "Se preferir, responda aqui que encaminhamos ao respons√°vel. üôÇ"
        )

    return ""  # sem correspond√™ncia; deixa o fluxo tratar

def responder_com_chatgpt(mensagem_usuario):
    # Prompt do atendente com as informa√ß√µes fixas da escola
    sistema = (
        "Voc√™ √© um atendente simp√°tico e objetivo da 'Escola de Futebol Nunes 9'. "
        "Use sempre portugu√™s claro e acolhedor. "
        "Se o usu√°rio pedir algo do menu, incentive a digitar um n√∫mero (1 a 5) ou 'menu'. "
        "Use as informa√ß√µes OFICIAIS abaixo ao responder d√∫vidas:\n\n"
        f"- Nome: {ESCOLA_NOME}\n"
        "- P√∫blico: crian√ßas de 5 a 12 anos\n"
        "- Treinos: de segunda a quinta-feira; 3 vezes por semana por aluno\n"
        f"- Hor√°rios: {', '.join(HORARIOS)}\n"
        f"- Mensalidade: R$ {MENSALIDADE:.2f}\n"
        f"- Contato do atendente: {WHATS_ATENDENTE}\n"
        "- Documentos: 1 foto 3x4; RG ou Certid√£o de Nascimento; CPF; "
        "comprovante de resid√™ncia; RG e CPF do respons√°vel; declara√ß√£o escolar; atestado m√©dico; "
        "todas as c√≥pias devem ser leg√≠veis.\n"
    )

    resposta = client_openai.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": sistema},
            {"role": "user", "content": mensagem_usuario}
        ]
    )
    return resposta.choices[0].message.content.strip()

@app.route('/whatsapp', methods=['POST'])
def whatsapp():
    numero = request.form.get('From')
    mensagem = (request.form.get('Body') or "").strip()
    resp = MessagingResponse()

    # Normaliza apenas d√≠gitos quando usu√°rio enviar algo como "Op√ß√£o 1"
    somente_numero = re.sub(r"\D", "", mensagem)

    # Primeira intera√ß√£o ou pedido de menu
    if numero not in usuarios or mensagem.lower() in {"menu", "op√ß√µes", "opcoes"}:
        usuarios[numero] = {"estado": "menu"}
        resp.message(menu_texto())
        return str(resp)

    # Se usu√°rio digitou 1‚Äì5, responde direto
    if somente_numero in {"1", "2", "3", "4", "5"}:
        resposta = responder_opcao(somente_numero)
        if resposta:
            resp.message(resposta + "\n\nDigite *menu* para voltar √†s op√ß√µes.")
            return str(resp)

    # Caso contr√°rio, usa ChatGPT como fallback
    resposta_gpt = responder_com_chatgpt(mensagem)
    resp.message(resposta_gpt + "\n\nSe preferir, digite *menu* para ver as op√ß√µes.")
    return str(resp)

if __name__ == '__main__':
    app.run(debug=True)
